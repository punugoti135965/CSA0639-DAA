def quick_sort(arr, low, high):
    if low < high:
        pi = partition(arr, low, high)  # Partitioning index
        quick_sort(arr, low, pi - 1)  # Recursively sort left half
        quick_sort(arr, pi + 1, high)  # Recursively sort right half

def partition(arr, low, high):
    pivot = arr[high]  # Choosing the last element as pivot
    i = low - 1  # Pointer for smaller elements

    for j in range(low, high):
        if arr[j] < pivot:
            i += 1
            arr[i], arr[j] = arr[j], arr[i]  # Swap if element is smaller than pivot

    arr[i + 1], arr[high] = arr[high], arr[i + 1]  # Swap pivot into correct position
    return i + 1  # Return partition index

def sort_array(nums):
    quick_sort(nums, 0, len(nums) - 1)
    return nums

# Example usage:
nums = [5, 2, 9, 1, 5, 6]
print(sort_array(nums))  # Output: [1, 2, 5, 5, 6, 9]
