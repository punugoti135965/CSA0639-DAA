def findWays(m, n, N, i, j):
    # Define the directions for movement: up, down, left, right
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    
    # Create a DP table with dimensions (N+1) x m x n
    dp = [[[0] * n for _ in range(m)] for _ in range(N+1)]
    
    # Start at the given position
    dp[0][i][j] = 1
    
    # DP iteration to fill the table
    for step in range(1, N+1):
        for x in range(m):
            for y in range(n):
                # Skip if there are no ways to reach (x, y) at the previous step
                if dp[step-1][x][y] == 0:
                    continue
                # Try moving in all 4 possible directions
                for dx, dy in directions:
                    new_x, new_y = x + dx, y + dy
                    if 0 <= new_x < m and 0 <= new_y < n:
                        dp[step][new_x][new_y] += dp[step-1][x][y]
    
    # Now, calculate the total number of ways to exit the grid at step N
    ways = 0
    
    # Check the boundary of the grid
    for x in range(m):
        ways += dp[N][x][0]  # Left boundary
        ways += dp[N][x][n-1]  # Right boundary
    for y in range(n):
        ways += dp[N][0][y]  # Top boundary
        ways += dp[N][m-1][y]  # Bottom boundary
    
    return ways
# Example 1:
m1, n1, N1, i1, j1 = 2, 2, 2, 0, 0
print(findWays(m1, n1, N1, i1, j1))  # Output: 6
# Example 2:
m2, n2, N2, i2, j2 = 1, 3, 3, 0, 1
print(findWays(m2, n2, N2, i2, j2))  # Output: 12
